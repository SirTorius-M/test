#!/bin/sh

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/busybox"
URL_MAGISK_BOOT="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/magiskboot"
URL_SHELLCODE="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/BootShim.Dualboot.bin"
URL_KP="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/kernelpatcher"
URL_UEFI="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/nabu_UEFI.fd"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MAGISK_BOOT="$(pwd)/magiskboot"
TARGET_SHELLCODE="$(pwd)/BootShim.Dualboot.bin"
TARGET_KP="$(pwd)/kernelpatcher"
TARGET_UEFI="$(pwd)/nabu_UEFI.fd"


# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo ""
    echo ""
    echo "EDK2-UEFI PATCHER for Xiaomi Pad 5 ($DEVICE_CODENAME) FOR LINUX BOOT MENU"
    echo ""
else
    echo ""
    echo "This device is not supported"
    echo "your Device - $DEVICE_CODENAME"
    echo ""
    exit 1
fi

# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"

    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        echo ""
        echo "Please re-boot/Restart your device and Re-run this Code."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"

# Delete all files in $(pwd) except busybox
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MAGISK_BOOT" "$TARGET_MAGISK_BOOT"
download_and_set_permissions "$URL_SHELLCODE" "$TARGET_SHELLCODE"
download_and_set_permissions "$URL_KP" "$TARGET_KP"
download_and_set_permissions "$URL_UEFI" "$TARGET_UEFI"

echo ""
echo ""
echo "Backing up boot.img to /sdcard..."
$(pwd)/busybox dd if=/dev/block/platform/soc/1d84000.ufshc/by-name/boot$(getprop ro.boot.slot_suffix) of=boot.img bs=8M || { echo "Failed to dump boot image!"; exit 1; }
$(pwd)/busybox cp -f boot.img /sdcard/boot_backup$(getprop ro.boot.slot_suffix).img
echo "Backup completed"
echo ""
echo "unpacking boot.img..."
$(pwd)/magiskboot unpack -h boot.img || { echo "Failed to unpack image!"; exit 1; }
echo "unpacking completed"
echo ""
echo "Check if UEFI already installed..."
$(pwd)/busybox dd if=kernel bs=1 count=8 skip=64 status=none | grep "EDK2-MSM" && echo "UEFI detected, updating..." || echo "Stock boot.img detected, installing..."
echo ""
echo "Patch the kernel"
$(pwd)/busybox stat -c "%s" nabu_UEFI.fd > payloadsize
$(pwd)/kernelpatcher kernel BootShim.Dualboot.bin $(cat payloadsize) || { echo "Failed to patch kernel!"; exit 1; }
echo "Patching kernel completed"
echo ""
echo "Merging patched kernel with UEFI"
$(pwd)/busybox cat kernel nabu_UEFI.fd > new_kernel
$(pwd)/busybox rm -f kernel
$(pwd)/busybox mv new_kernel kernel
echo ""
echo "repacking boot.img..."
$(pwd)/magiskboot repack boot.img || { echo "Failed to repack image!"; exit 1; }
$(pwd)/magiskboot cleanup
echo "repacking boot.img completed"
echo ""
echo "Flashing new patched boot image"
$(pwd)/busybox dd if=new-boot.img of=/dev/block/platform/soc/1d84000.ufshc/by-name/boot$(getprop ro.boot.slot_suffix) bs=8M || { echo "Failed to flash patched boot image!"; exit 1; }
$(pwd)/busybox cp -f new-boot.img /sdcard/patched_boot.img
echo "patched boot Backup completed"
echo ""
# Cleanup
cd
$(pwd)/busybox rm -rf /dev/tmp
echo ""
echo "Done installing edk2-msm UEFI!"
