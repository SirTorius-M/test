#!/bin/sh

#su -c "cd / && mkdir -p /dev/tmp && chmod 777 /dev/tmp && cd /dev/tmp && curl -sSL https://raw.githubusercontent.com/SirTorius-M/test/main/patcher -o /dev/tmp/patcher && chmod 777 /dev/tmp/patcher && su -c "/dev/tmp/patcher""

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/busybox"
URL_MAGISK_BOOT="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/magiskboot"
URL_SHELLCODE="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/BootShim.Dualboot.bin"
URL_KP="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/kernelpatcher"
URL_UEFI="https://raw.githubusercontent.com/SirTorius-M/test/main/bin/nabu_UEFI.fd"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MAGISK_BOOT="$(pwd)/magiskboot"
TARGET_SHELLCODE="$(pwd)/BootShim.Dualboot.bin"
TARGET_KP="$(pwd)/kernelpatcher"
TARGET_UEFI="$(pwd)/nabu_UEFI.fd"


# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo ""
	  echo ""
	  echo ""
    echo "EDK2-UEFI PATCHER for Xiaomi Pad 5 ($DEVICE_CODENAME) FOR LINUX BOOT MENU"
    echo ""
    echo ""
else
    echo ""
    echo "This device is not supported"
    echo "your Device - $DEVICE_CODENAME"
    echo ""
    exit 1
fi

echo ""
# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"

    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        echo ""
        echo "Please re-boot/Restart your device and Re-run this Code."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"

# Delete all files in $(pwd) except busybox
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MAGISK_BOOT" "$TARGET_MAGISK_BOOT"
download_and_set_permissions "$URL_SHELLCODE" "$TARGET_SHELLCODE"
download_and_set_permissions "$URL_KP" "$TARGET_KP"
download_and_set_permissions "$URL_UEFI" "$TARGET_UEFI"

echo "TILL NOW AS OF NOW"
exit 0

# Set working directory
mkdir -p /sdcard/nabu
cd /sdcard/nabu
mkdir -p /dev/tmp/
cp /sdcard/magiskboot /dev/tmp/
cp /sdcard/kernelpatcher /dev/tmp/
chmod 755 /dev/tmp/magiskboot /dev/tmp/kernelpatcher

# Check for necessary files
ls /sdcard/*_UEFI.fd 2>/dev/null || echo "No edk2-msm UEFI image found!" && exit 1
ls /sdcard/BootShim.Dualboot.bin 2>/dev/null || echo "No edk2-msm bootshim image found!" && exit 1

# Get current boot slot
getprop ro.boot.slot_suffix

# Backup original boot image
dd bs=1048576 if=/dev/block/bootdevice/by-name/boot$(getprop ro.boot.slot_suffix) of=boot.img || echo "Failed to dump image!" && exit 1
cp -f boot.img /sdcard/boot_backup$(getprop ro.boot.slot_suffix).img
echo "Backup completed"

# Unpack boot image
/dev/tmp/magiskboot unpack -h boot.img || echo "Failed to unpack image!" && exit 1

# Check if UEFI is already installed
dd if=kernel bs=1 count=8 skip=64 status=none | grep "EDK2-MSM" && echo "UEFI detected, updating..." || echo "Stock boot.img detected, installing..."

# Patch the kernel
stat -c "%s" /sdcard/*_UEFI.fd > payloadsize
/dev/tmp/kernelpatcher kernel /sdcard/BootShim.Dualboot.bin $(cat payloadsize) || echo "Failed to patch kernel!" && exit 1

# Merge patched kernel with UEFI
cat kernel /sdcard/*_UEFI.fd > new_kernel
rm -f kernel
mv new_kernel kernel

# Repack boot image
/dev/tmp/magiskboot repack boot.img || echo "Failed to repack image!" && exit 1
/dev/tmp/magiskboot cleanup

# Flash new boot image
blockdev --setrw /dev/block/bootdevice/by-name/boot$(getprop ro.boot.slot_suffix)
cat new-boot.img /dev/zero > /dev/block/bootdevice/by-name/boot$(getprop ro.boot.slot_suffix) 2>/dev/null || true
rm -f new-boot.img

# Cleanup
rm -rf /sdcard/nabu

echo "Done installing edk2-msm UEFI!"
