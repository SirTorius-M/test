name: Nabu Kernel Build

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/ppanzenboeck/kernel_xiaomi_nabu.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'derp15.1'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'NabuKernel'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain or tarball URL"
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/muhdhaniff55/AnyKernel3.git -b anothermaster'

jobs:
  Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev llvm
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq device-tree-compiler

      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} kernel_source

      - name: Cloning Toolchain
        run: |
          TOOLCHAIN_URL="${{ github.event.inputs.TOOLCHAIN_URL }}"
          mkdir -p toolchain

          if [[ $TOOLCHAIN_URL == *.txt ]]; then
            actual_url=$(curl -s "$TOOLCHAIN_URL")
            curl -L "$actual_url" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C toolchain
            rm toolchain.tar.gz
          elif [[ "$TOOLCHAIN_URL" == *.tar.* ]]; then
            curl -L "$TOOLCHAIN_URL" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C toolchain
            rm toolchain.tar.gz
          else
            git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} toolchain
          fi

      - name: Check CONFIG_NR_CPUS
        run: |
          find kernel_source/arch/arm64/configs/ -name "*.config" | xargs grep "CONFIG_NR_CPUS" || echo "CONFIG_NR_CPUS not found"

      - name: Set-up Cache
        id: cache-out
        uses: actions/cache@v4
        with:
          path: out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          export TZ='Asia/Kolkata'
          objdir="out"
          anykernel="anykernel"
          clang_dir="toolchain"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y").zip"
          arch="arm64"
          export KBUILD_BUILD_HOST=Newehh
          export KBUILD_BUILD_USER=home

          export PATH="${clang_dir}/bin:$PATH"

          cd kernel_source

          make -s ARCH=${arch} O=../${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)

          make -j$(nproc --all) \
            O="../${objdir}" \
            ARCH="${arch}" \
            SUBARCH=arm64 \
            DTC_EXT=dtc \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            STRIP=llvm-strip \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            READELF=llvm-readelf \
            LLVM=1 \
            LLVM_IAS=1

          compiled_image="../${objdir}/arch/arm64/boot/Image"
          compiled_dtbo="../${objdir}/arch/arm64/boot/dtbo.img"

          git clone -q ${{ github.event.inputs.ANYKERNEL }} "../$anykernel"
          cp "$compiled_image" "../$anykernel/Image"
          cp "$compiled_dtbo" "../$anykernel/dtbo.img"
          cat ../${objdir}/arch/arm64/boot/dts/qcom/sm8250-v2*.dtb > "../$anykernel/dtb"
          cd "../$anykernel"
          zip -r AnyKernel.zip *
          mv "AnyKernel.zip" "../$zip_name"
          cd ..
          rm -rf "$anykernel"

          echo "ZIP_FILE=$zip_name" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(TZ='Asia/Kolkata' date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=$compiled_dtbo" >> $GITHUB_ENV
          echo "IMAGE=$compiled_image" >> $GITHUB_ENV

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_FILE }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
